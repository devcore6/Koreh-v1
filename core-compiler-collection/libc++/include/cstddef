/* 
 * The Koreh-v1 Project
 * Koreh-v1 C++ Compiler (ccxx)
 * 
 * Copyright (C) 2021, Bryan "/dev/core" M.
 * Licensed under the Mozilla Public License 2.0
 * https://www.mozilla.org/en-US/MPL/2.0/
 * 
 * Common language definitions as defined in
 * Clause 17.2.1 of the ISO-C++ 23 working draft.
 * 
 * The ISO documents referenced by this compiler can be found at
 * http://open-std.org/JTC1/SC22/WG21/docs/papers/2020/n4878.pdf
 * 
 */

/* 
 * synopsis:
 * 
 * #define __cpp_lib_byte
 * __BEGIN_NAMESPACE_STD
 * #if __ARCH == 64
 * using ptrdiff_t = long long;
 * using size_t = unsigned long long;
 * #else
 * using ptrdiff_t = long;
 * using size_t = unsigned long;
 * #endif
 * using max_align_t = long double;
 * using nullptr_t = decltype(nullptr);
 * enum class byte : unsigned char {};
 * template<class IntType>
 * constexpr byte& operator<<=(byte& b, IntType shift) noexcept;
 * template<class IntType>
 * constexpr byte operator<<(byte b, IntType shift) noexcept;
 * template<class IntType>
 * constexpr byte& operator>>=(byte& b, IntType shift) noexcept;
 * template<class IntType>
 * constexpr byte operator>>(byte b, IntType shift) noexcept;
 * constexpr byte& operator|=(byte& l, byte r) noexcept;
 * constexpr byte operator|(byte l, byte r) noexcept;
 * constexpr byte& operator&=(byte& l, byte r) noexcept;
 * constexpr byte operator&(byte l, byte r) noexcept;
 * constexpr byte& operator^=(byte& l, byte r) noexcept;
 * constexpr byte operator^(byte l, byte r) noexcept;
 * constexpr byte operator~(byte b) noexcept;
 * template<class IntType>
 * constexpr IntType to_integer(byte b) noexcept;
 * __END_NAMESPACE_STD
 * 
 * #define NULL
 * #define offsetof(P, D)
 * 
 */

#ifndef __LIBCPP_CSTDDEF
# define __LIBCPP_CSTDDEF

# include <config>

# ifndef __cpp_lib_byte
#  define __cpp_lib_byte 201603L
# endif // __cpp_lib_byte

__BEGIN_NAMESPACE_STD

# if __ARCH == 64
	using ptrdiff_t = long long;
	using size_t = unsigned long long;
# else
	using ptrdiff_t = long;
	using size_t = unsigned long;
#endif // __ARCH == 64
	using max_align_t = long double;
	using nullptr_t = decltype(nullptr);
	enum class byte : unsigned char {};
	/*
	 * Clause 17.2.5 defines byte operations as such
	 */
	template<class IntType>
	constexpr byte& operator<<=(byte& b, IntType shift) noexcept {
		return b = b << shift;
	}
	template<class IntType>
	constexpr byte operator<<(byte b, IntType shift) noexcept {
		return static_cast<byte>(static_cast<unsigned int>(b) << shift);
	}
	template<class IntType>
	constexpr byte& operator>>=(byte& b, IntType shift) noexcept {
		return b = b >> shift;
	}
	template<class IntType>
	constexpr byte operator>>(byte b, IntType shift) noexcept {
		return static_cast<byte>(static_cast<unsigned int>(b) >> shift);
	}
	constexpr byte& operator|=(byte& l, byte r) noexcept {
		return l = (byte)(unsigned char)((unsigned)l | (unsigned)r);
	}
	constexpr byte operator|(byte l, byte r) noexcept {
		return static_cast<byte>(static_cast<unsigned int>(l) | static_cast<unsigned int>(r));
	}
	constexpr byte& operator&=(byte& l, byte r) noexcept {
		return l = (byte)(unsigned char)((unsigned)l & (unsigned)r);
	}
	constexpr byte operator&(byte l, byte r) noexcept {
		return static_cast<byte>(static_cast<unsigned int>(l) & static_cast<unsigned int>(r));
	}
	constexpr byte& operator^=(byte& l, byte r) noexcept {
		return l = (byte)(unsigned char)((unsigned)l ^ (unsigned)r);
	}
	constexpr byte operator^(byte l, byte r) noexcept {
		return static_cast<byte>(static_cast<unsigned int>(l) ^ static_cast<unsigned int>(r));
	}
	constexpr byte operator~(byte b) noexcept {
		return static_cast<byte>(~static_cast<unsigned int>(b));
	}
	template<class IntType>
	constexpr IntType to_integer(byte b) noexcept {
		return static_cast<IntType>(b);
	}

__END_NAMESPACE_STD

/*
 * Clause 17.2.3 paragraph 2 defines NULL as a macro to a
 * null pointer constant
 */
# ifndef NULL
#  ifdef __cplusplus
#   define NULL nullptr
#  else
#   define NULL (void*)0
#  endif
# endif

/*
 * We define offsetoff through a builtin language extension in the compiler
 */
# define offsetof(P, D) \
	__builtin_offsetof(P, D)

#endif // __LIBCPP_CSTDDEF
